---
import { Image } from "astro:assets";
import brandImg from "../images/brand.png";
import toSlug from "../helpers/toSlug.mts";
import debounce from "../helpers/debounce.mts";

// NOTE: I'm not sure how get it in build time at this moment, probably i18n will be useful here
const sections = ["O nas", "Projekty", "Wsparcie", "Kontakt", "Wspieraj nas"];
---

<style>
  .element-0 {
    grid-row: 4;
    @apply indent--30px;
  }

  .element-1 {
    grid-row: 5;
  }

  .element-2 {
    grid-row-start: 6;
    grid-row-end: 8;
    @apply flex items-center;
  }

  .element-2 span {
    @apply text-4xl font-bold text-black;
  }

  .element-3 {
    grid-row: 8;
  }

  .element-4 {
    grid-row: 9;
    @apply indent--30px;
  }
</style>

<nav id="desktop-menu" class="hidden fixed top-0">
  <div class="translate-x--1/3 translate-y-1/2">
    <div
      class="grid gap-10"
      style={{ gridTemplateColumns: "max-content max-content" }}
    >
      <div>
        <Image id="navigation-wheel" src={brandImg} width="500" alt="brand" />
      </div>
      <div>
        <div
          id="navigation-wheel-items"
          class="h-full max-h-full grid grid-rows-12"
        >
          {
            sections.map((section, index) => {
              return (
                <div
                  class:list={[`element-${index}`]}
                  data-wheel-item-index={index}
                  data-wheel-item-slug={toSlug(section)}
                >
                  <span class="text-3xl text-#a6a6a6">
                    <a href="#">{section}</a>
                  </span>
                </div>
              );
            })
          }
        </div>
      </div>
    </div>
  </div>

  <script>
    import debounce from "../helpers/debounce.mts";

    let currentRotate = -30;
    const MAX_ITEMS_IN_WHEEL = 5;

    const setActiveItem = (index: number, withoutAnim: boolean) => {
      const newActive = document.querySelector(
        `[data-wheel-item-index='${index}']`,
      );

      const currentActive = document.querySelector(
        `[data-wheel-item-index].element-2`,
      );

      if (!newActive || !currentActive) return;

      // NOTE: Oh god move it...
      const newActiveElNumberClass = parseInt(
        newActive.className.at(
          newActive.className.indexOf("element-") + "element-".length,
        ) ?? "",
      );

      const newActiveItemIndex = parseInt(
        newActive.getAttribute("data-wheel-item-index") ?? "",
      );

      if (withoutAnim) {
        const activeItemIndex = parseInt(
          currentActive.getAttribute("data-wheel-item-index") ?? "",
        );

        if (activeItemIndex === index) return;

        const movement = 2 - newActiveElNumberClass;
        document.querySelectorAll("[data-wheel-item-index]").forEach((el) => {
          const elItemIndex = parseInt(
            el.getAttribute("data-wheel-item-index") ?? "",
          );

          const elementNumberClass = parseInt(
            el.className.at(
              el.className.indexOf("element-") + "element-".length,
            ) ?? "",
          );

          const nextElNumberClass =
            (MAX_ITEMS_IN_WHEEL + (elementNumberClass + movement)) %
            MAX_ITEMS_IN_WHEEL;

          el.classList.toggle(`element-${elementNumberClass}`);
          el.classList.toggle(`element-${nextElNumberClass}`);
          if (
            (elItemIndex > newActiveItemIndex && 2 > nextElNumberClass) ||
            (newActiveItemIndex > elItemIndex && nextElNumberClass > 2)
          ) {
            el.classList.add("hidden");
          } else {
            el.classList.remove("hidden");
          }
        });
      }
    };

    const desktopMenu = document.getElementById("desktop-menu");
    const navigationWheel = document.getElementById("navigation-wheel");
    const navigationWheelItems = document.getElementById(
      "navigation-wheel-items",
    );
    if (!navigationWheel || !navigationWheelItems || !desktopMenu)
      throw Error("Can't find wheel");

    const observer = new IntersectionObserver(
      (entries) => {
        debounce<(entries: IntersectionObserverEntry[]) => void>((entries) => {
          let anyIntersect = false;
          entries.forEach(({ isIntersecting, target }) => {
            if (isIntersecting) {
              anyIntersect = true;
              const newItemSlug =
                target.getAttribute("data-section-slug") ?? "";
              const newActiveIndex = parseInt(
                document
                  .querySelector(`[data-wheel-item-slug='${newItemSlug}']`)
                  ?.getAttribute("data-wheel-item-index") ?? "",
              );

              const currentActiveIndex = parseInt(
                document
                  .querySelector(`.element-2`)
                  ?.getAttribute("data-wheel-item-index") ?? "",
              );

              let nextRotate =
                currentRotate +
                (currentActiveIndex > newActiveIndex ? 30 : -30);
              const anim = navigationWheel.animate(
                [
                  { transform: `rotate(${currentRotate}deg)` },
                  { transform: `rotate(${nextRotate}deg)` },
                ],
                {
                  duration: 450,
                  fill: "forwards",
                },
              );

              anim.finished.then(() => {
                currentRotate = nextRotate;
                anim.commitStyles();
                anim.cancel();

                setActiveItem(newActiveIndex, true);
              });
            }
          });

          if (anyIntersect) {
            if (desktopMenu.classList.contains("hidden")) {
              desktopMenu.classList.remove("hidden");
              desktopMenu.animate(
                [
                  { transform: `translateX(-50%)` },
                  { transform: `translateX(0)` },
                ],
                {
                  duration: 450,
                },
              );
            }
          } else {
            desktopMenu
              .animate(
                [
                  { transform: `translateX(0)` },
                  { transform: `translateX(-50%)` },
                ],
                {
                  duration: 450,
                },
              )
              .finished.then(() => {
                desktopMenu.classList.add("hidden");
              });
          }
        }, 150)(entries);
      },
      {
        rootMargin: "-50% 0% -50% 0%",
      },
    );

    document.querySelectorAll("section").forEach((el) => {
      observer.observe(el);
    });
  </script>
</nav>
