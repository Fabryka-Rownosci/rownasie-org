---
import { Image } from "astro:assets";

import toSlug from "@helpers/toSlug";
import { useTranslation } from "@i18n/useTranslation";

import brandImg from "@images/brand.png";

import type { Language } from "@i18n/languages";

interface Props {
  id: string;
  classes: string;
  autoHide?: boolean;
  language: Language;
}

const { id, classes, autoHide, language } = Astro.props;
const t = useTranslation(language);
const sections = Object.values(t("section_titles"));
---

<style>
  .element-0 {
    @apply row-start-3 row-end-3 xl:row-start-4 xl:row-end-4 indent--30px;
  }

  .element-1 {
    @apply row-start-4 row-end-4 xl:row-start-5 xl:row-end-5;
  }

  .element-2 {
    @apply row-start-5 row-end-8 xl:row-start-6 xl:row-end-8 flex items-center;
  }

  .element-2 span {
    @apply font-bold text-2xl text-white xl:text-4xl xl:text-black;
  }

  .element-3 {
    @apply row-start-8 row-end-8;
  }

  .element-4 {
    @apply row-start-9 row-end-9 indent--30px;
  }
</style>

<basic-navigation
  data-wheel-items-count={sections.length}
  data-wheel-auto-hide={autoHide?.toString?.()}
>
  <nav id={id} class={classes}>
    <div
      class="translate-x--10rem md:translate-x--1/3 xl:translate-x--1/3 translate-y-1/2 xl:translate-y-1/2 md:translate-y-1/3"
    >
      <div
        class="grid gap-10"
        style={{ gridTemplateColumns: "max-content max-content" }}
      >
        <div class="w-300px md:w-500px">
          <Image
            class="navigation-wheel"
            src={brandImg}
            alt={t("images_alt.brand")}
          />
        </div>
        <div>
          <div class="h-full max-h-full grid grid-rows-12">
            {
              sections.map((section, index) => (
                <basic-navigation-item
                  class:list={[`element-${index}`]}
                  data-wheel-item-position-on-site={index}
                  data-wheel-item-id={toSlug(section)}
                >
                  <span class="text-lg text-white xl:text-3xl xl:text-#a6a6a6">
                    <a href={`#${toSlug(section)}`}>{section}</a>
                  </span>
                </basic-navigation-item>
              ))
            }
          </div>
        </div>
      </div>
    </div>
  </nav>
</basic-navigation>

<script>
  import debounce from "@helpers/debounce";

  //  NOTE: I had to add this unnecessary type
  // due to error in astro eslint plugin which cause problems
  // with typescript in script tags (Typescript there is supported by astro)
  // and w/o IntersectionObserverDebounce type
  // reports debounce<(entries: IntersectionObserverEntry[]) => void>;
  // as syntax error

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  type IntersectionObserverDebounce = (
    entries: IntersectionObserverEntry[],
  ) => void;

  const ITEM_IN_WHEEL_CLASS_NAME_PREFIX = "element-";
  const ACTIVE_POSITION_IN_WHEEL = 2;
  const ATTR_ITEM_POSITION_ON_SITE = "data-wheel-item-position-on-site";
  const ATTR_ITEM_ID = "data-wheel-item-id";

  class BasicNavigationItem extends HTMLElement {
    get itemPositionOnSite() {
      return parseInt(this.getAttribute(ATTR_ITEM_POSITION_ON_SITE) ?? "");
    }

    get itemPositionInWheel() {
      const groupedClassNames = this.className.split(
        ITEM_IN_WHEEL_CLASS_NAME_PREFIX,
      );

      if (groupedClassNames.length < 2)
        throw Error("Incorrect basic navigation item found");

      return parseInt(groupedClassNames[1].split(" ")[0]);
    }

    set itemPositionInWheel(val) {
      this.classList.toggle(
        ITEM_IN_WHEEL_CLASS_NAME_PREFIX.concat(
          this.itemPositionInWheel.toString(),
        ),
      );

      this.classList.toggle(
        ITEM_IN_WHEEL_CLASS_NAME_PREFIX.concat(val.toString()),
      );
    }

    get itemId() {
      return this.getAttribute("data-wheel-item-id");
    }

    constructor() {
      super();
    }
  }

  class BasicNavigation extends HTMLElement {
    #navigationWheel: HTMLImageElement;
    #wheelRotation: number = 30;

    #activeItem?: BasicNavigationItem | null;
    get activeItem() {
      return this.#activeItem;
    }

    set activeItem(val) {
      this.#activeItem = val;
      this.reorderNavigationItems();
    }

    get itemsInWheel() {
      return parseInt(this.getAttribute("data-wheel-items-count") ?? "");
    }

    get autoHide() {
      return !!this.getAttribute("data-wheel-auto-hide");
    }

    reorderNavigationItems() {
      if (this.activeItem) {
        const orderItemsVector =
          ACTIVE_POSITION_IN_WHEEL - this.activeItem.itemPositionInWheel;

        this.querySelectorAll(`[${ATTR_ITEM_POSITION_ON_SITE}]`).forEach(
          (el) => {
            if (!this.activeItem) return;

            const navigationItem = el as BasicNavigationItem;
            const newPositionInWheel =
              (this.itemsInWheel +
                (navigationItem.itemPositionInWheel + orderItemsVector)) %
              this.itemsInWheel;

            navigationItem.itemPositionInWheel = newPositionInWheel;

            if (
              navigationItem.itemPositionOnSite - ACTIVE_POSITION_IN_WHEEL >
                this.activeItem.itemPositionOnSite ||
              (this.activeItem.itemPositionOnSite >
                navigationItem.itemPositionOnSite &&
                newPositionInWheel > ACTIVE_POSITION_IN_WHEEL)
            ) {
              navigationItem.classList.add("hidden");
            } else {
              navigationItem.classList.remove("hidden");
            }
          },
        );
      }
    }

    rotateWheel(wheelItem: BasicNavigationItem, onFinish: () => void) {
      const currentActivePositionOnSite =
        this.activeItem?.itemPositionOnSite || 0;

      let nextRotation =
        this.#wheelRotation +
        (currentActivePositionOnSite > wheelItem.itemPositionOnSite ? 30 : -30);

      const anim = this.#navigationWheel.animate(
        [
          { transform: `rotate(${this.#wheelRotation}deg)` },
          { transform: `rotate(${nextRotation}deg)` },
        ],
        {
          duration: 450,
          fill: "forwards",
        },
      );

      anim.finished.then(() => {
        this.#wheelRotation = nextRotation;
        if (this.#navigationWheel.getBoundingClientRect().width) {
          anim.commitStyles();
          anim.cancel();
        }

        onFinish();
      });
    }

    constructor() {
      super();

      const navigationWheel =
        this.querySelector<HTMLImageElement>(".navigation-wheel");
      const nav = this.querySelector("nav");

      if (!navigationWheel || !nav)
        throw new Error(
          "Basic navigation can't find their required DOM Elements",
        );

      this.#navigationWheel = navigationWheel;
      const observer = new IntersectionObserver(
        (entries) => {
          // eslint-disable-next-line no-undef
          debounce<IntersectionObserverDebounce>((entries) => {
            let anyIntersect = false;

            entries.forEach(({ isIntersecting, target }) => {
              if (isIntersecting) {
                anyIntersect = true;

                const newItemId =
                  target.getAttribute("data-section-slug") ?? "";

                const newActiveItem = this.querySelector(
                  `[${ATTR_ITEM_ID}='${newItemId}']`,
                ) as BasicNavigationItem;

                this.rotateWheel(newActiveItem, () => {
                  this.activeItem = newActiveItem;
                });
              }
            });

            if (this.autoHide) {
              if (anyIntersect) {
                if (nav.classList.contains("hidden")) {
                  nav.classList.remove("hidden");
                  nav.animate(
                    [
                      { transform: `translateX(-50%)` },
                      { transform: `translateX(0)` },
                    ],
                    {
                      duration: 450,
                    },
                  );
                }
              } else {
                nav
                  .animate(
                    [
                      { transform: `translateX(0)` },
                      { transform: `translateX(-50%)` },
                    ],
                    {
                      duration: 450,
                    },
                  )
                  .finished.then(() => {
                    nav.classList.add("hidden");
                  });
              }
            }
          }, 150)(entries);
        },
        {
          rootMargin: "-50% 0% -50% 0%",
        },
      );

      document.querySelectorAll("section").forEach((el) => {
        observer.observe(el);
      });
    }
  }

  customElements.define("basic-navigation", BasicNavigation);
  customElements.define("basic-navigation-item", BasicNavigationItem);
</script>
