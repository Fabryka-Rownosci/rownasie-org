---
import Button from "./Button.astro";

interface Props {
  list: { tab: string; id: string }[];
}

const { list } = Astro.props;
---

<style is:global>
  div.tab-inactive {
    @apply h-0 overflow-hidden opacity-0;
  }

  div.tab-active,
  div.tabs-wrapper:not([data-tabs-initialized]) > div.tab-inactive:first-child {
    @apply h-auto opacity-100;
  }

  button.tab-active {
    @apply bg-primary-700 hover:bg-primary-600;
  }
</style>

<basic-tabs data-root-tabs>
  <ul class="mb-15 overflow-auto whitespace-nowrap">
    {
      list.map(({ tab, id }) => (
        <li class="mr-5 inline last:mr-0">
          <Button data-tab-id={id}>
            <span class="text-lg">{tab}</span>
          </Button>
        </li>
      ))
    }
  </ul>
  <div class="tabs-wrapper mt-5 overflow-hidden">
    <slot />
  </div>
</basic-tabs>

<script>
  class BasicTabs extends HTMLElement {
    #activeTab?: {
      content: HTMLElement | null;
      toggleButton: HTMLButtonElement;
    };

    get activeTab() {
      return this.#activeTab;
    }

    set activeTab(val) {
      if (val) {
        if (!val?.content || !val?.toggleButton)
          throw new Error("Basic tabs received incomplete active tab object");

        val.content.classList.replace("tab-inactive", "tab-active");
        val.toggleButton.classList.add("tab-active");
      }

      if (this.#activeTab) {
        if (!this.#activeTab?.content || !this.#activeTab?.toggleButton)
          throw new Error("Basic tabs received incomplete active tab object");

        this.#activeTab.content.classList.replace("tab-active", "tab-inactive");
        this.#activeTab.toggleButton.classList.remove("tab-active");
      }

      this.#activeTab = val;
    }

    constructor() {
      super();

      const tabsItemsWrapper = this.querySelector(".tabs-wrapper");
      const firstTabContent = tabsItemsWrapper
        ?.children[0] as HTMLElement | null;

      const firstTabToggleButton = this.querySelector(
        `[data-tab-id=${firstTabContent?.getAttribute("data-tab-id")}`,
      ) as HTMLButtonElement | null;

      if (!tabsItemsWrapper || !firstTabContent || !firstTabToggleButton)
        throw new Error("Basic tabs can't find their required DOM Elements");

      tabsItemsWrapper.setAttribute("data-tabs-initialized", "true");
      this.activeTab = {
        content: firstTabContent,
        toggleButton: firstTabToggleButton,
      };

      this.querySelectorAll("ul button[data-tab-id]").forEach((tabButton) => {
        tabButton.addEventListener("click", () => {
          const activeTabId =
            this.activeTab?.toggleButton.getAttribute("data-tab-id");
          const newTabId = tabButton.getAttribute("data-tab-id");
          if (newTabId === activeTabId) return;

          const newActiveContent = tabsItemsWrapper.querySelector(
            `[data-tab-id='${newTabId}']`,
          ) as HTMLElement | null;

          this.activeTab = {
            content: newActiveContent,
            toggleButton: tabButton as HTMLButtonElement,
          };
        });
      });
    }
  }

  customElements.define("basic-tabs", BasicTabs);
</script>
